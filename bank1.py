import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import altair as alt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from imblearn.over_sampling import RandomOverSampler
from sklearn.preprocessing import LabelEncoder

# Configuration de la page
st.set_page_config(
    page_title="Classification des Donn√©es Bancaires",
    page_icon="üè¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

alt.themes.enable("dark")

# -------------------------
# Barre lat√©rale

if 'page_selection' not in st.session_state:
    st.session_state.page_selection = 'a_propos'  # Page par d√©faut

# Fonction pour mettre √† jour page_selection
def set_page_selection(page):
    st.session_state.page_selection = page

with st.sidebar:
    st.title('üè¶ Classification des Donn√©es Bancaires')

    # Navigation par boutons
    st.subheader("Sections")
    if st.button("√Ä Propos", use_container_width=True, on_click=set_page_selection, args=('a_propos',), key="btn_a_propos"):
        pass
    if st.button("Jeu de Donn√©es", use_container_width=True, on_click=set_page_selection, args=('jeu_de_donnees',), key="btn_jeu_de_donnees"):
        pass
    if st.button("Analyse Exploratoire", use_container_width=True, on_click=set_page_selection, args=('analyse_exploratoire',), key="btn_analyse_exploratoire"):
        pass
    if st.button("Pr√©diction", use_container_width=True, on_click=set_page_selection, args=('prediction',), key="btn_prediction"):
        pass
    if st.button("Conclusion", use_container_width=True, on_click=set_page_selection, args=('conclusion',), key="btn_conclusion"):
        pass

    # D√©tails du projet
    st.subheader("R√©sum√©")
    st.markdown("""
        Un tableau de bord interactif pour explorer et classifier les donn√©es d'une campagne marketing bancaire.

        - [Jeu de Donn√©es](https://archive.ics.uci.edu/ml/datasets/Bank+Marketing)
        - [Notebook Google Colab](https://colab.research.google.com/drive/1KJDBrx3akSPUW42Kbeepj64ZisHFD-NV?usp=sharing)
        - [D√©p√¥t GitHub](https://github.com/teguegni/bank-additionnal-full/Streamlit-Bank-Classification-Dashboard)

        **Auteur :** [`Kenfack Teguegni Junior`](https://jcdiamante.com)
    """)

# -------------------------

# Charger les donn√©es
try:
    df = pd.read_csv('bank-additional-full.csv', delimiter=';')
except FileNotFoundError:
    st.error("Le fichier 'bank-additional-full.csv' est introuvable. Veuillez v√©rifier son emplacement.")
    st.stop()

# Page principale
if st.session_state.page_selection == 'a_propos':
    # Page √Ä Propos
    st.title("Ô∏è √Ä Propos")
    st.markdown("""
        Cette application explore le jeu de donn√©es **Bank Marketing** et propose :

        - Une exploration visuelle des donn√©es.
        - Un pr√©traitement et nettoyage des donn√©es.
        - La construction et l'√©valuation de mod√®les d'apprentissage automatique.
        - Une interface interactive pour pr√©dire si un client souscrira √† un produit.

        **Technologies utilis√©es :**
        - Python (Streamlit, Altair, Pandas)
        - Machine Learning (Scikit-learn)

        **Auteur : Kenfack Teguegni Junior**

        ‚úâÔ∏è Contact : kenfackteguegni@gmail.com
    """)

elif st.session_state.page_selection == 'conclusion':
    # Page Conclusion
    st.title("Ô∏è Conclusion")
    st.markdown("""
        Un traitement minutieux et r√©fl√©chi du DataFrame `bank-additional-full.csv` est fondamental pour maximiser la pr√©cision
        et la fiabilit√© du mod√®le de pr√©diction. En combinant explorations, pr√©traitements ad√©quats, et √©valuations rigoureuses,
        un mod√®le robuste peut √™tre d√©velopp√© pour mieux pr√©dire les comportements des clients envers la souscription √† un produit.
    """)

elif st.session_state.page_selection == 'jeu_de_donnees':
    # Page Jeu de Donn√©es
    st.title(" Jeu de Donn√©es")

    # Afficher les premi√®res lignes du DataFrame
    if st.checkbox("Afficher le DataFrame", key="chk_afficher_df"):
        nb_rows = st.slider("Nombre de lignes √† afficher :", min_value=1, max_value=len(df), value=10, key="slider_nb_rows")
        st.write(df.head(nb_rows))

    # Afficher les statistiques descriptives
    if st.checkbox("Afficher les statistiques descriptives", key="chk_stats_desc"):
        st.write(df.describe())

elif st.session_state.page_selection == 'analyse_exploratoire':
    st.title(" Analyse Exploratoire")

    # V√©rification des duplications
    duplicates = df.duplicated()
    st.write(f"Nombre de duplications : {duplicates.sum()}")

    # Suppression des duplications
    df = df.drop_duplicates()

    # Remplacement des valeurs 'unknown'
    for column in df.columns:
        if df[column].dtype == 'object':
            mode_value = df[column].mode()[0]
            df[column] = df[column].replace('unknown', mode_value)

    # V√©rification des valeurs manquantes
    st.subheader("V√©rification des valeurs manquantes")
    missing_values = df.isnull().sum()
    st.write(missing_values[missing_values > 0])

    # Graphique Altair
    st.subheader("Relation entre l'√¢ge et le m√©tier")
    df['job'] = df['job'].astype('category')
    age_job_chart = (
        alt.Chart(df)
        .mark_circle(size=60)
        .encode(
            x=alt.X('age:Q', title='√Çge'),
            y=alt.Y('job:O', title='M√©tier', sort=None),
            color='y:N',
            tooltip=['age:Q', 'job:N', 'y:N']
        )
        .properties(
            title='Relation entre l\'√¢ge et le m√©tier',
            width=600,
            height=400
        )
        .interactive()
    )
    st.altair_chart(age_job_chart, use_container_width=True)

elif st.session_state.page_selection == 'apprentissage_automatique':
    # S√©lection des colonnes num√©riques
    colonne_numerique = df[['age', 'duration', 'campaign', 'pdays', 'previous', 'emp.var.rate', 'cons.price.idx', 'cons.conf.idx', 'euribor3m', 'nr.employed']]

    # Fonction pour d√©tecter et remplacer les valeurs aberrantes
    def replace_outliers(df):
        for col in df.select_dtypes(include=['number']).columns:
            Q1 = df[col].quantile(0.25)
            Q3 = df[col].quantile(0.75)
            IQR = Q3 - Q1
            lower_bound = Q1 - 1.5 * IQR
            upper_bound = Q3 + 1.5 * IQR
            df[col] = np.where(df[col] < lower_bound, lower_bound, df[col])
            df[col] = np.where(df[col] > upper_bound, upper_bound, df[col])

    replace_outliers(df)

    # Encodage des variables cat√©gorielles
    for column in ['marital', 'job', 'education', 'month', 'day_of_week', 'poutcome']:
        fe = df.groupby(column).size() / len(df)
        df[f'{column}_freq_encode'] = df[column].map(fe)

    # Encodage des colonnes cat√©gorielles binaires
    le = LabelEncoder()
    for column in ['default', 'housing', 'loan', 'contact']:
        df[column] = le.fit_transform(df[column])

    # Encodage de la colonne cible
    encoder = LabelEncoder()
    df['y_encoded'] = encoder.fit_transform(df['y'])

    # Suppression des colonnes cat√©gorielles originales
    colonnes_a_supprimer = ['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'day_of_week', 'poutcome', 'y']
    df_propre = df.drop(colonnes_a_supprimer, axis=1)

    # Sur√©chantillonnage
    y_encoded = df_propre['y_encoded'].values
    X = df_propre.drop(columns=['y_encoded']).values
    ros = RandomOverSampler(random_state=42)
    X_resampled, y_resampled = ros.fit_resample(X, y_encoded)
    df_resampled = pd.DataFrame(X_resampled, columns=df_propre.columns[:-1])
    df_resampled['y_encoded'] = y_resampled

    # Division des donn√©es
    X = df_resampled.drop(columns=['y_encoded'])
    y = df_resampled['y_encoded']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Entra√Ænement du mod√®le
    model = RandomForestClassifier()
    model.fit(X_train, y_train)

    # √âvaluation du mod√®le
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred)

    st.write(f'Accuracy: {accuracy:.2f}')
    st.write('Classification Report:')
    st.write(report)

elif st.session_state.page_selection == 'prediction':
    # Page Pr√©diction
    st.title("üîÆ Pr√©diction")

    # Cr√©ation des champs de saisie
    age = st.number_input("√Çge", min_value=0, max_value=120, value=30, key="input_age")
    duration = st.number_input("Dur√©e (en secondes)", min_value=0, value=100, key="input_duration")
    campaign = st.number_input("Nombre de contacts lors de cette campagne", min_value=0, value=1, key="input_campaign")
    pdays = st.number_input("Nombre de jours depuis le dernier contact", min_value=-1, value=-1, key="input_pdays")
    previous = st.number_input("Nombre de contacts pr√©c√©dents", min_value=0, value=0, key="input_previous")
    emp_var_rate = st.number_input("Taux de variation de l'emploi (%)", value=0.0, key="input_emp_var_rate")
    cons_price_idx = st.number_input("Indice des prix √† la consommation", value=92.0, key="input_cons_price_idx")
    cons_conf_idx = st.number_input("Indice de confiance des consommateurs", value=-50.0, key="input_cons_conf_idx")
    euribor3m = st.number_input("Taux d'Euribor √† 3 mois (%)", value=0.0, key="input_euribor3m")
    nr_employed = st.number_input("Nombre d'employ√©s", value=5000, key="input_nr_employed")
    marital_freq_encode = st.number_input("Code marital", min_value=0, value=0, key="input_marital_freq_encode")
    job_freq_encode = st.number_input("Code emploi", min_value=0, value=0, key="input_job_freq_encode")
    education_freq_encode = st.number_input("Code √©ducation", min_value=0, value=0, key="input_education_freq_encode")
    month_freq_encode = st.number_input("Code mois", min_value=0, value=0, key="input_month_freq_encode")
    day_freq_encode = st.number_input("Code jour", min_value=0, value=0, key="input_day_freq_encode")
    poutcome_freq_encode = st.number_input("Code r√©sultat de la campagne pr√©c√©dente", min_value=0, value=0, key="input_poutcome_freq_encode")

    # Bouton pour soumettre le formulaire
    if st.button("Soumettre", key="btn_soumettre"):
        input_data = np.array([[age, duration, campaign, pdays, previous, emp_var_rate, cons_price_idx, cons_conf_idx, euribor3m, nr_employed, marital_freq_encode, job_freq_encode, education_freq_encode, month_freq_encode, day_freq_encode, poutcome_freq_encode]])
        prediction = model.predict(input_data)
        result = "Pr√™t accord√©." if prediction[0] == 1 else "Pr√™t non accord√©."
        st.write(result)


   
