import streamlit as st
import pandas as pd
import altair as alt
import seaborn as sns
import matplotlib.pyplot as plt  # Importation de matplotlib.pyplot
from sklearn.model_selection import train_test_split
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score 

# Configuration de la page
st.set_page_config(
    page_title="Classification des Donn√©es Bancaires",
    page_icon="üè¶",  
    layout="wide", 
    initial_sidebar_state="expanded"
)

alt.themes.enable("dark")

# -------------------------
# Barre lat√©rale

if 'page_selection' not in st.session_state:
    st.session_state.page_selection = 'a_propos'  # Page par d√©faut

# Fonction pour mettre √† jour page_selection
def set_page_selection(page):
    st.session_state.page_selection = page

with st.sidebar:
    st.title(' üè¶ Classification des Donn√©es Bancaires')

    # Navigation par boutons
    st.subheader("Sections")
    if st.button("√Ä Propos", use_container_width=True, on_click=set_page_selection, args=('a_propos',)):
        pass
    if st.button("Jeu de Donn√©es", use_container_width=True, on_click=set_page_selection, args=('jeu_de_donnees',)):
        pass
    if st.button("Analyse Exploratoire", use_container_width=True, on_click=set_page_selection, args=('analyse_exploratoire',)):
        pass
    if st.button("Pr√©diction", use_container_width=True, on_click=set_page_selection, args=('prediction',)):
        pass
    if st.button("Conclusion", use_container_width=True, on_click=set_page_selection, args=('conclusion',)):
        pass

    # D√©tails du projet
    st.subheader("R√©sum√©")
    st.markdown("""
        Un tableau de bord interactif pour explorer et classifier les donn√©es d'une campagne marketing bancaire.

        -  [Jeu de Donn√©es](https://archive.ics.uci.edu/ml/datasets/Bank+Marketing)
        -  [Notebook Google Colab](https://colab.research.google.com/drive/1KJDBrx3akSPUW42Kbeepj64ZisHFD-NV?usp=sharing)
        -  [D√©p√¥t GitHub](https://github.com/teguegni/bank-additionnal-full/Streamlit-Bank-Classification-Dashboard)

        **Auteur :** [`Kenfack Teguegni Junior`](https://jcdiamante.com)
    """)

# -------------------------

# Charger les donn√©es
try:
    df = pd.read_csv('bank-additional-full.csv', delimiter=';')
except FileNotFoundError:
    st.error("Le fichier 'bank-additional-full.csv' est introuvable. Veuillez v√©rifier son emplacement.")
    st.stop()

# Page principale
if st.session_state.page_selection == 'a_propos':
    # Page √Ä Propos
    st.title("Ô∏è √Ä Propos")
    st.markdown("""
        Cette application explore le jeu de donn√©es **Bank Marketing** et propose :

        - Une exploration visuelle des donn√©es.
        - Un pr√©traitement et nettoyage des donn√©es.
        - La construction et l'√©valuation de mod√®les d'apprentissage automatique.
        - Une interface interactive pour pr√©dire si un client souscrira √† un produit.

        **Technologies utilis√©es :**
        - Python (Streamlit, Altair, Pandas)
        - Machine Learning (Scikit-learn)

        **Auteur : Kenfack Teguegni Junior**

        ‚úâÔ∏è Contact : kenfackteguegni@gmail.com
    """)
elif st.session_state.page_selection == 'conclusion':
     # Page √Ä Propos
    st.title("Ô∏è conclusion")
    st.markdown("""
        Un traitement minutieux et r√©fl√©chi du DataFrame bank-additional-full est fondamental pour maximiser la pr√©cision 
        et la fiabilit√© du mod√®le de pr√©diction. En combinant explorations, pr√©traitements ad√©quats, et √©valuations rigoureuses,
         on peut d√©velopper un mod√®le robuste qui est mieux √©quip√© pour pr√©dire les comportements des clients envers la souscription √† un produit.
    """)

elif st.session_state.page_selection == 'jeu_de_donnees':
    # Page Jeu de Donn√©es
    st.title(" Jeu de Donn√©es")

    # Afficher les premi√®res lignes du DataFrame
    if st.checkbox("Afficher le DataFrame"):
        nb_rows = st.slider("Nombre de lignes √† afficher :", min_value=105, max_value=41189, value=10)
        st.write(df.head(nb_rows))

    # Afficher les statistiques descriptives
    if st.checkbox("Afficher les statistiques descriptives"):
        st.write(df.describe())

elif st.session_state.page_selection == 'analyse_exploratoire':
    import seaborn as sns  # Importation de seaborn
    import matplotlib.pyplot as plt  # Importation de matplotlib.pyplot
    import altair as alt

    st.title(" Analyse Exploratoire")

    # Remplacement des valeurs 'unknown'
    for column in df.columns:
        if df[column].dtype == 'object':
            mode_value = df[column].mode()[0]
            df[column] = df[column].replace('unknown', mode_value)

    # S√©lection des colonnes cat√©gorielles
    categorical_cols = [col for col in df.columns if df[col].dtype == 'object' and col != 'y']

    # Affichage des tables crois√©es et graphiques
    for column in categorical_cols:
        st.subheader(f"Table crois√©e pour {column}")
        st.write(df.groupby(['y', column])[column].size().unstack(level=0))

        st.subheader(f"Countplot pour {column}")
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.countplot(x=df["y"], hue=df[column], ax=ax)
        st.pyplot(fig)  # Utilisation de st.pyplot pour afficher le graphique

    # V√©rification des valeurs manquantes
    st.subheader("V√©rification des valeurs manquantes")
    missing_values = df.isnull().sum()
    st.write(missing_values[missing_values > 0])

    # Graphique Altair
    st.subheader("Relation entre l'√¢ge et le m√©tier")
    df['job'] = df['job'].astype('category')
    age_job_chart = (
        alt.Chart(df)
        .mark_circle(size=60)
        .encode(
            x=alt.X('age:Q', title='√Çge'),
            y=alt.Y('job:O', title='M√©tier', sort=None),
            color='y:N',
            tooltip=['age:Q', 'job:N', 'y:N']
        )
        .properties(
            title='Relation entre l\'√¢ge et le m√©tier',
            width=600,
            height=400
        )
        .interactive()
    )
    st.altair_chart(age_job_chart, use_container_width=True)

elif st.session_state.page_selection == 'apprentissage_automatique':
    from sklearn.model_selection import train_test_split
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.metrics import classification_report, confusion_matrix

    # ... (votre code pour charger X et y)

    import pandas as pd
    from sklearn.model_selection import train_test_split
    from sklearn.ensemble import RandomForestClassifier

    # Charger le DataFrame
    df = pd.read_csv('bank-additional-full.csv', delimiter=';')

    # V√©rifiez que les colonnes n√©cessaires existent
    print(df.columns)
 # num√©risation des valeurs cat√©gorielles 
    import pandas as pd  
    from sklearn.preprocessing import LabelEncoder  
    label_encoder = LabelEncoder()  
    df['job'] = label_encoder.fit_transform(df['job'])  
    df['marital'] = label_encoder.fit_transform(df['marital'])    
    df['education'] = label_encoder.fit_transform(df['education'])  
    df['default'] = label_encoder.fit_transform(df['default'])
    df['housing'] = label_encoder.fit_transform(df['housing'])
    df['loan'] = label_encoder.fit_transform(df['loan'])
    df['contact'] = label_encoder.fit_transform(df['contact'])
    df['month'] = label_encoder.fit_transform(df['month'])
    df['day_of_week'] = label_encoder.fit_transform(df['day_of_week'])
    df['poutcome'] = label_encoder.fit_transform(df['poutcome'])
    # D√©finir X (caract√©ristiques) et y (cible)
    X = df[['age', 'duration', 'campaign']]  # Remplacez par vos colonnes pertinentes
    y = df['y'].map({'yes': 1, 'no': 0})  # Convertir la cible en num√©rique

    # Diviser les donn√©es en ensembles d'entra√Ænement et de test
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Entra√Æner un mod√®le simple pour tester
    model = RandomForestClassifier()
    model.fit(X_train, y_train)

        # Tester une pr√©diction
    prediction = model.predict(X_test)
    print(prediction[:5])  # Afficher les premi√®res pr√©dictions

    # Cr√©ation et entra√Ænement du mod√®le
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    from sklearn.utils import resample  

    # Concatenation des donn√©es d'origine  
    data = pd.concat([X_train, y_train], axis=1)  

    # S√©parez les classes  
    no_class = data[data['y'] == 0]  # Classe majoritaire  
    yes_class = data[data['y'] == 1]  # Classe minoritaire  

    # Sous-√©chantillonnage de la classe majoritaire  
    no_class_downsampled = resample(no_class,  
                                 replace=False,  # Ne pas remplacer  
                                 n_samples=len(yes_class),  # Pour √©quilibrer  
                                 random_state=42)  # Pour la reproductibilit√©  

    # Combiner la classe minoritaire avec la classe majoritaire sous-√©chantillonn√©e  
    balanced_data = pd.concat([no_class_downsampled, yes_class])  

    #  S√©parer les caract√©ristiques et la cible  
    X_balanced = balanced_data.drop('y', axis=1)  
    y_balanced = balanced_data['y']  
elif st.session_state.page_selection == 'prediction':
        # ... (votre code pour la page de pr√©diction)
        # Page Pr√©diction  
    st.title("üîÆ Pr√©diction")  
    from sklearn.ensemble import RandomForestClassifier  

        # Formulaire pour saisir les caract√©ristiques  
    age = st.number_input("√Çge du client", min_value=18, max_value=120, value=30)  
    duration = st.number_input("Dur√©e du contact (seconds)", min_value=0, value=60)  
    campaign = st.number_input("Nombre de contacts lors de la campagne", min_value=1, value=1)  
    
    if st.button("Pr√©dire"): 
        from sklearn.model_selection import train_test_split  
        from sklearn.preprocessing import StandardScaler  
        from sklearn.ensemble import RandomForestClassifier
        from sklearn.metrics import confusion_matrix
        import seaborn as sns  
        import matplotlib.pyplot as plt  # Importation de matplotlib.pyplot  
    try:  
            # Pr√©traitement potentiel des donn√©es d'entr√©e et des caract√©ristiques  
            # (Assurez-vous que le mod√®le est d√©j√† form√© au pr√©alable et charg√© ici)  
            X = df[['age', 'duration', 'campaign']]  # Ajustez selon vos colonnes de caract√©ristiques.  
            y = df['y']  # Cible √† pr√©dire  
            
            # Splitting and training d'un mod√®le d'exemple  
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)  
            model = RandomForestClassifier()  
            model.fit(X_train, y_train)  
            
            prediction = model.predict([[age, duration, campaign]])  
            subscription_status = "Oui" if prediction[0] == 'yes' else "Non"  
            st.success(f"Le client va-t-il souscrire au produit ? : **{subscription_status}**") 
            # Pr√©dictions  
            y_pred = model.predict(X_test)  

            # √âvaluation  
            from sklearn.metrics import confusion_matrix
            from sklearn.metrics import classification_report, accuracy_score
            print(confusion_matrix(y_test, y_pred))  
            print(classification_report(y_test, y_pred))
    except Exception as e:  
            st.error(f"Une erreur est survenue : {e}")
